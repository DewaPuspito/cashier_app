// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("admin-user")
}

model Cashier {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  shifts       Shift[]
  transactions Transaction[]

  @@map("cashiers")
}

model Product {
  id               String            @id @default(uuid())
  name             String
  price            Int
  stock            Int
  category         Category
  imageUrl         String?
  isDeleted        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  transactionItems TransactionItem[]

  @@map("products")
}

model Shift {
  id           String        @id @default(uuid())
  cashier      Cashier          @relation(fields: [cashierId], references: [id])
  cashierId    String
  startCash    Int
  endCash      Int?
  startTime    DateTime      @default(now())
  endTime      DateTime?
  totalIncome  Int?
  transactions Transaction[]

  @@map("shifts")
}

model Transaction {
  id               String            @id @default(uuid())
  shift            Shift             @relation(fields: [shiftId], references: [id])
  shiftId          String
  cashier          Cashier              @relation(fields: [cashierId], references: [id])
  cashierId        String
  paymentType      PaymentType
  cashReceived     Int?
  cashChange       Int?
  cardNumber       String?
  amount           Int
  createdAt        DateTime          @default(now())
  transactionItems TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  subTotal      Int

  @@map("transaction_items")
}

enum PaymentType {
  CASH
  DEBIT
}

enum Category {
  FOOD
  DRINK
  ELECTRONICS
  STATIONERY
  CLOTHING
  HEALTH
}
